Notes on ft_transcendance:

the subject:

- generally we're supposed to develope a game of pong.
- multiplayer, real time

strict stuff:

-	libraries/tools that give you a finished feature or module
-	if there are instructions on a third party tool/library it must be followed
-	small libraries/tools that solve a simple, unique task are okay
-	during eval the team needs to justify the use of lkibraries/tools that isnt
	explicitly approved by the subject and is not in contradiction with the project's
	constrains (so need to argue why library/tool is used, it cannot be against what the
	project says is allowed)
-	evaluator is going to decide whether a library/tool is allowed or not

the rules:

-	web page may or may not have a backend. both is allowed
-	if backend = yes:
		- PHP cant have frameworks
		- that instruction can be overridden if the FRAMEWORK MODULE
		- if framework uses a database, then it must follow the DATABASE MODULE

-	frontend needs to use Typescript as base code. can be modified by FRONTEND MODULE
-	website must be a single-page application. user should be able to use back and foreward
	buttons of the browser
-	must run on MOZILLA FIREFOX (latest stable version)

-	no unhandled errors when running everything.

-	use of docker is mandatory and needs to be started in one line (Makefile?)
-	one autonomus container.

-> we need to locate everything in /goingfre or /sgoingfre
-> we are not root so bind-mount volumes arent possible if there are non-root UIDs in the container

the game:

-	playing pong vs other players
-	user must be able to play live pong vs other player on website
-	players will use the same keyboard (so one commputer, website like Inception ig?)
	-> the REMOTE PLAYERS MODULE can enahnce that
	
-	there needs to be a tournament system -> multiple players that take turns playing against
	each other (much like switch sports where you use two controllers and the thing tells you
	who's playing based on an order)

-	registration system is mandatory -> at the start of tournament each player puts in their alias.
	will reset when new tournament is started (can be modified using the STANDART USER MANAGEMENT MODULE)
	-> does not default user account creation
	-> in mandatory the user simply enters an alias manaully
-	matchmaking system is mandatory -> tournament organizes the matches and announces the next match

-	all players have same rules and paddle speed. also counts for AI

-	game must adhere to default frontend containers or one can use the FRONTEND MODULE or override
	it with the GRAPHICS MODULE.
	
-	original Pong (1972) is the guide. doesnt need to graphically be the same but the essence must be
	somewhat the same

-	the tournament system must work with and without registration:
	- without the STANDART USER MANAGEMENT MODULE: users put alias manually
	- witht he module: aliases are linked to registered accounts, allowing persistent
	  stats and friend lists
	
	- the module still needs the tournament with the random matches etc.
	
security concerns:

-	passwords stored in database must be hashed if applicable
-	website must be protected against SQL injections/XSS attacks
-	if backend is there its mandatory to have HTTPS connection for all aspects (wss instead of ws e.g)
-	forms and any user input must have validations, either on the base (no backend) or on server side if backend
-	regardless of the use of JWT SECURITY MODULE with 2FA, security is essencial.
	-> if API is there, ensure routes are protected

-	strong password hashing algorithm
-	any passwords etc. must be stored locally in .env file and ignored by .gitignore



GLOSSAR ft_transcendance;

-autonomus container = independant container
-	backend: website kann dynamische inhalte verarbeiten (bsp. Wordpress mit PHP, php ist ein backend service
-	frontend: nutzer oberfläche
-	UID: user ID
-	hashed: text wird mit hash function in einen hashed text umgewandelt (komplizierte Zeichenkette)
	-> gute Algorithmen? SHA2, bcrypt. Besser aber Speicherintensiver? Argoin2id.
-	SQL injections: bösartige SQL angriffe ans backend die manipulieren sollen an Daten zu kommen,
	die eigentlich nicht einsehbar sein sollten
-	xss attacks: Cross-Site-Scripting, über sicherheitslücken schädlichen code in die webanwendung zu
	schläusen
-	ws: webSocket
-	wss: secure WebSocket most likely (verbindet nur mit HTTPS und nicht HTTP)
-	API: Application Programming Interface, Programmierschnittstelle. Code, der die Zugangspunkte für den Server
	regelt und die Kommunikation ermöglicht
	(es gibt internal, partner/customer und open source APIs.)


good info links:

https://www.youtube.com/watch?v=1oTuMPIwHmk





